package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;  


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info); 
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString()); 
        
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
//	if (s != null && s.value != null) 
//		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


//TERMINALI

				// poredjano po redu iz pdfa mikrojava_20_21
								// kljucne reci:
terminal PROG, BREAK, CLASS, ELSE, CONST, IF, SWITCH, DO, WHILE, NEW;
terminal PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, CASE;

 terminal ENUM; // Trenutno se ne koristi
								// Vrste tokena:
terminal String IDENT;
terminal Integer NUMBER_CONST;
terminal Character CHAR_CONST;
terminal String  BOOL_CONST;		// Primetimo da ne postoji Boolean i da je Char a ne Character
									// I da bi ovde stavio CHAR tamo u flex sam morao da stavim CharAt(1)
								// Operatori:
terminal PLUS, MINUS, MUL,DIV, MOD, EQUAL, NEQUAL, GT, GE, LT, LE, AND, OR;
terminal ASSIGN, INC, DEC, SEMI, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE;
terminal LBRACE, RBRACE, QMARK, DOTS;
 
terminal ERROR;	// Kasnije dodat, na kraju ne sluzi nicemu ali aj
terminal MAX;
  
 
 // NETERMINALI
								//Dodati neterminali
nonterminal ConstDecl ConstDecl;
nonterminal ClassDecl ClassDecl;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
								// Ovi dole su vec postojali u sablon fajlu
								
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualParamList ActualParamList; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal StatementTrue StatementTrue;
nonterminal StatementFalse StatementFalse; 
nonterminal ConstVarClassDeclList ConstVarClassDeclList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclOne ConstDeclOne;
nonterminal VarDeclOne VarDeclOne;
nonterminal Extends Extends;
nonterminal ManyVarDecl ManyVarDecl;
nonterminal CaseList CaseList;
nonterminal Unmatched Unmatched;
nonterminal Matched Matched;
nonterminal Epsilon Epsilon;
nonterminal Array Array;
nonterminal Stagod Stagod;
nonterminal ConstType ConstType;
nonterminal DoWhile DoWhile;

nonterminal Errorr Errorr;

nonterminal rs.etf.pp1.symboltable.concepts.Obj  ProgName, Program, MethodTypeName, Designator, MethodDecl;  
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList, RetType, ExprManjiProstiji; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition,CondTerm, ConditionFinal;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ExprCondition ,ExprConditionTrue ,ExprConditionFalse;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact;
					// Pokusao je na 46:50 da objasni zasto je sve ovo struktura ali nije uspeo 
					// Inace Baci gresku ako stavis da je samo Type struktura
					// Imas kod Term jos neko objasnjenje
					
					
// PRECEDENCE 
precedence  right ELSE;
precedence  right IF;


// PRAVILA
Program ::= (Program) PROG ProgName:p ConstVarClassDeclList:C1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, C1, M2); RESULT.setLine(pleft); :} ;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} ;
								  
ConstVarClassDeclList ::= (ConstVarClassDeclList_Const) ConstVarClassDeclList:C1 ConstDecl:C2 {: RESULT=new ConstVarClassDeclList_Const(C1, C2); RESULT.setLine(C1left); :}
						| (ConstVarClassDeclList_Var) ConstVarClassDeclList:C1 VarDecl:V2 {: RESULT=new ConstVarClassDeclList_Var(C1, V2); RESULT.setLine(C1left); :}
						| (ConstVarClassDeclList_Class) ConstVarClassDeclList:C1 ClassDecl:C2 {: RESULT=new ConstVarClassDeclList_Class(C1, C2); RESULT.setLine(C1left); :}
						| (ConstVarClassDeclList_No) Epsilon:E1 {: RESULT=new ConstVarClassDeclList_No(E1); RESULT.setLine(E1left); :} ;
 
ConstDecl ::= (ConstDeclaration) CONST ConstType:cType ConstDeclList:C1 SEMI {: RESULT=new ConstDeclaration(cType, C1); RESULT.setLine(cTypeleft); :} ;

ConstType ::= (ConstType) Type:T1 {: RESULT=new ConstType(T1); RESULT.setLine(T1left); :};
// Ovo sam dodao na osnovu methodName u izvornom kodu

ConstDeclList ::= 	(ConstDeclList_nadovezivanje) ConstDeclList:C1 COMMA ConstDeclOne:C2 {: RESULT=new ConstDeclList_nadovezivanje(C1, C2); RESULT.setLine(C1left); :}
				| 	(ConstDeclList_single)	ConstDeclOne:C1 {: RESULT=new ConstDeclList_single(C1); RESULT.setLine(C1left); :} ;	
		
							// U primeru u diplomskom radu stoji val 
ConstDeclOne ::= 	(ConstDeclOneElementNumber) IDENT:numIdent ASSIGN NUMBER_CONST:val {: RESULT=new ConstDeclOneElementNumber(numIdent, val); RESULT.setLine(numIdentleft); :}
				|	(ConstDeclOneElementChar) IDENT:charIdent ASSIGN CHAR_CONST:val {: RESULT=new ConstDeclOneElementChar(charIdent, val); RESULT.setLine(charIdentleft); :}
				| 	(ConstDeclOneElementBool) IDENT:boolIdent ASSIGN BOOL_CONST:val {: RESULT=new ConstDeclOneElementBool(boolIdent, val); RESULT.setLine(boolIdentleft); :}
				 ;
				

			 
VarDecl ::= (VarDeclaration) Type:varType VarDeclList:V1 SEMI {: RESULT=new VarDeclaration(varType, V1); RESULT.setLine(varTypeleft); :} 
			// Ovde si se ti pravio pametan pa spojio u jedno Type i ostatak ali tip moras da odvojis i sacuvas
			// preko nekog drugog imena a ne Type
			// tipa typeVar ::= Type
			// Edit: Ne mora
			| (VarDeclarationNumberError) error:err2 SEMI  {:
			  			MyCompilerImpl.addErrorVeljko(1, "Lose deklarisanje promenljive",err2left );
			  			parser.log.debug("Uspesan oporavak od greske pri def glob prom."); 
				  		//parser.report_error("Deklarisanje promenljive" + err2left , null); 
			  		:} {: RESULT=new VarDeclarationNumberError(); :}  ;

VarDeclList ::= (VarDeclarations) VarDeclList:V1 COMMA VarDeclOne:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
			|	(VarDecListOneElement) VarDeclOne:V1 {: RESULT=new VarDecListOneElement(V1); RESULT.setLine(V1left); :}  ;

							// Ovo sa greskom pronadjeno na www2.cs.tum.edu..cup..examples	
							// Kako primetih, ovo error nije nigde definisano opet, tako da je  	
							// A kako rece onaj batica na snimku, uparuje sve do ;
							// Analizirajuci onu gresku sa Expr kontam da ce on svakako napraviti 
							// default klasu error i uparivace sve
							// Ovo ne resava od problema int 13s, s1,s3; Vec to jeste greska fatalna, 
							// A ovo nije int s1, 13s, s3;
								
VarDeclOne ::= 	(VarDeclOneNoSquare) IDENT:nameVarOne {: RESULT=new VarDeclOneNoSquare(nameVarOne); RESULT.setLine(nameVarOneleft); :}
			|	(VarDeclOneSquare) IDENT:nameVarOneArray LSQUARE RSQUARE {: RESULT=new VarDeclOneSquare(nameVarOneArray); RESULT.setLine(nameVarOneArrayleft); :} 
			| 	(VarDeclError1) error:err1  
					{: 
				  		MyCompilerImpl.addErrorVeljko(1, "Lose deklarisanje promenljive",err1left );
				  		parser.log.debug("Uspesan oporavak od greske pri def glob prom."); 
				  		//parser.report_error("Deklarisanje promenljive" + err1left , null);  
				  	:} {: RESULT=new VarDeclError1(); :}  ;  

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}  ;

ClassDecl ::= (ClassDeclNoMethod) CLASS IDENT:className Extends:E1 LBRACE ManyVarDecl:M2 RBRACE {: RESULT=new ClassDeclNoMethod(className, E1, M2); RESULT.setLine(classNameleft); :} 
			| (ClassDeclMethod) CLASS IDENT:className Extends:E1 LBRACE ManyVarDecl:M2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassDeclMethod(className, E1, M2, M3); RESULT.setLine(classNameleft); :}   ;

Extends ::= 	(ExtendClass) EXTENDS Type:extendType {: RESULT=new ExtendClass(extendType); RESULT.setLine(extendTypeleft); :}
			| 	(NoExtends) {: RESULT=new NoExtends(); :} /* epsilon */ ;
									
ManyVarDecl ::= (ManyVarDeclaration) ManyVarDecl:M1 VarDecl:V2 {: RESULT=new ManyVarDeclaration(M1, V2); RESULT.setLine(M1left); :}
	//		|	(ManyVarDeclOne) VarDecl
			|	(ManyVarDeclNo) Epsilon:E1 {: RESULT=new ManyVarDeclNo(E1); RESULT.setLine(E1left); :} ;
		
									 
MethodDeclList ::= 	(MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|	(NoMethodDecl) Epsilon:E1 {: RESULT=new NoMethodDecl(E1); RESULT.setLine(E1left); :};

MethodDecl ::= (MethodDeclaration) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN ManyVarDecl:M3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclaration(M1, F2, M3, S4); RESULT.setLine(M1left); :} ;   

MethodTypeName ::=  (MethodTypeName) RetType:rett IDENT:methodName {: RESULT=new MethodTypeName(rett, methodName); RESULT.setLine(rettleft); :} ; 
			
										
RetType ::= (RetType1) Type:typeRet {: RESULT=new RetType1(typeRet); RESULT.setLine(typeRetleft); :} 
		|	(RetVoid1) VOID:voidRet {: RESULT=new RetVoid1(); :} ;
				/* 	Zasto je ovo moralo bas ovako pojma nemam
					Najgore od svega je sto ne znam ni sto ne radi ni sto radi. 
					Prvobitna verzija je bila da ne postoji ovaj RetType vec sve u jednom
					Ali u .java klasi gresku baca 
				*/
		
FormPars ::=  (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} 
			| (NoFormParam) Epsilon:E1 {: RESULT=new NoFormParam(E1); RESULT.setLine(E1left); :} ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :} ;
					
FormalParamDecl ::= // 	(FormalParamDecl) Type:paramType IDENT:paramName |
				 		(FormalParamDeclArray) Type:paramType IDENT:paramNameArry  Array:A1 {: RESULT=new FormalParamDeclArray(paramType, paramNameArry, A1); RESULT.setLine(paramTypeleft); :};
				 			// Ovde je bacalo gresku u .java fajlu da ne moze da nadje parent
				 			// bla bla bla i kao lek za to sam ubacio ovaj Array koji moze da bude i null
				
Array ::= LSQUARE RSQUARE {: RESULT=new ArrayDerived1(); :} | Epsilon:E1 {: RESULT=new ArrayDerived2(E1); RESULT.setLine(E1left); :};

StatementList ::= 	(StatementListt) StatementList:S1 Statement:S2 {: RESULT=new StatementListt(S1, S2); RESULT.setLine(S1left); :}
				|  	(StatementListNo) Epsilon:E1 {: RESULT=new StatementListNo(E1); RESULT.setLine(E1left); :} ;
 

Statement ::= 	(NonIfStatement) Matched:M1 {: RESULT=new NonIfStatement(M1); RESULT.setLine(M1left); :}
		   |   	(IfStmt) Unmatched:U1 {: RESULT=new IfStmt(U1); RESULT.setLine(U1left); :}  ;    
		   

Unmatched ::= 	(IfStatement) IF LPAREN Condition:C1 RPAREN StatementTrue:S2 {: RESULT=new IfStatement(C1, S2); RESULT.setLine(C1left); :}
		 	|	(IfElseStatement) IF LPAREN Condition:C1 RPAREN StatementTrue:S2 ELSE StatementFalse:S3 {: RESULT=new IfElseStatement(C1, S2, S3); RESULT.setLine(C1left); :} ;
		 	
StatementTrue ::= (StatementTrue) Statement:S1 {: RESULT=new StatementTrue(S1); RESULT.setLine(S1left); :} ;
StatementFalse ::= (StatementFalse) Statement:S1 {: RESULT=new StatementFalse(S1); RESULT.setLine(S1left); :} ; 
 
 
		 	
// Dobar deo ovoga dole je za B ali jebi ga, ko bi na pocetku znao sta ce na kraju biti 
Matched ::= 	(StatDesign) DesignatorStatement:D1 SEMI {: RESULT=new StatDesign(D1); RESULT.setLine(D1left); :} 
			|	(StatWhile) DoWhile:D1 Statement:S2 WHILE LPAREN Condition:C3 RPAREN SEMI {: RESULT=new StatWhile(D1, S2, C3); RESULT.setLine(D1left); :}
			|	(StatBreak) BREAK SEMI {: RESULT=new StatBreak(); :}  
			|	(StatContinue) CONTINUE SEMI {: RESULT=new StatContinue(); :}
			| 	(StatRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatRead(D1); RESULT.setLine(D1left); :}
			|	(StatStat) LBRACE StatementList:S1 RBRACE {: RESULT=new StatStat(S1); RESULT.setLine(S1left); :}
			|	(StatCase) SWITCH LPAREN Expr:E1 RPAREN LBRACE CaseList:C2 RBRACE {: RESULT=new StatCase(E1, C2); RESULT.setLine(E1left); :}
			|	(StatReturn)	RETURN Expr:E1 SEMI {: RESULT=new StatReturn(E1); RESULT.setLine(E1left); :}
									// i ovde je razdvojeno kao i za printvalue
			|	(StatReturn2)	RETURN  SEMI {: RESULT=new StatReturn2(); :}
			|	(StatPrint) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new StatPrint(E1); RESULT.setLine(E1left); :} 
			|	(StatPrintValue) PRINT LPAREN Expr:E1 COMMA NUMBER_CONST:value RPAREN SEMI {: RESULT=new StatPrintValue(E1, value); RESULT.setLine(E1left); :} 
			|   (StatErrAssignment) error SEMI:gr
			  	{: 	
			  		MyCompilerImpl.addErrorVeljko(1, "Pogresno napisana instrukcija dodele",grleft );
			  		parser.log.debug("Parser: Uspesan oporavak od greske pri dodeli vrednosti. Linija: "+ grleft);
				  	//parser.report_error("Pogresno napisana instrukcija dodele" + grleft , null); 
			   	:} {: RESULT=new StatErrAssignment(); :};
							
					// Problem ovde postoji, ne radi :(StatPrint) PRINT LPAREN Expr PrintValuae RPAREN SEMI ;
					// pa sam razdvojio na dva dela. Ne radi jer baca gresku u .java fajlu, pre je bilo PrintValuae ::= ... ili epsilon
			
			
					// Ovo je u sutiji oporavak od svake greske, a ne samo od ASSIGN greske, sta god dodje pogresno, oporavice do;
		
		
DoWhile ::= (DoWhile) DO {: RESULT=new DoWhile(); :} ;

CaseList ::= 	(CaseListt) CaseList:C1 CASE:c Stagod:S2  DOTS:d StatementList:S3 {: RESULT=new CaseListt(C1, S2, S3); RESULT.setLine(C1left); :}
			| 	(CaseListNoElem) {: RESULT=new CaseListNoElem(); :} /* epsilon */ ;	
			
Stagod ::= NUMBER_CONST:N1 {: RESULT=new StagodDerived1(N1); RESULT.setLine(N1left); :} ;				// Verovatno radi i bez ovvoga ali neka ga

			 
			
			
DesignatorStatement ::= (DStatementAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DStatementAssign(D1, A2, E3); RESULT.setLine(D1left); :} 
					|	(DStatementParen) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DStatementParen(D1, A2); RESULT.setLine(D1left); :}
					| 	(DStatementInc) Designator:D1 INC {: RESULT=new DStatementInc(D1); RESULT.setLine(D1left); :}
					|	(DStatementDec) Designator:D1 DEC {: RESULT=new DStatementDec(D1); RESULT.setLine(D1left); :}  ;
//				 	|	(DStatementAssignError) Designator Assignop error SEMI:errAssign
//						{: 	
//							parser.report_error("Parser:AssignError: Greska, oporavak do ;, linija:" + errAssignleft +" kolona: "+ errAssignright , null); 
//			  				MyCompilerImpl.addErrorVeljko(1, "Greska pri dodeli",errAssignleft );
//			  		 	:} ;
//
//				  
				
ActPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
		|   (NoActuals) Epsilon:E1 {: RESULT=new NoActuals(E1); RESULT.setLine(E1left); :}  ;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|	(ActualParamEnd) Expr:E1 {: RESULT=new ActualParamEnd(E1); RESULT.setLine(E1left); :} ;
			
Condition ::=	(ConditionFinalAAA) ConditionFinal:C1 {: RESULT=new ConditionFinalAAA(C1); RESULT.setLine(C1left); :};

ConditionFinal ::= 	(ConditionMulti) ConditionFinal:C1 OR CondTerm:C2 {: RESULT=new ConditionMulti(C1, C2); RESULT.setLine(C1left); :}
				|	(ConditionOne)	CondTerm:C1 {: RESULT=new ConditionOne(C1); RESULT.setLine(C1left); :} ;
		

CondTerm ::= (CondTermMulti) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermMulti(C1, C2); RESULT.setLine(C1left); :}
		| 	 (CondTermEnd) CondFact:C1 {: RESULT=new CondTermEnd(C1); RESULT.setLine(C1left); :} ;

CondFact ::= (CondFactOne) 	ExprManjiProstiji:E1 {: RESULT=new CondFactOne(E1); RESULT.setLine(E1left); :} 
		|	 (CondFactRelop)	ExprManjiProstiji:E1 Relop:R2 ExprManjiProstiji:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :} ;
			
				// Setio sam se da je Ziza slao mejl i nova gramatika je ovakva:
				//
				// Expr = Expr1 "?" Expr1 ":" Expr1 | Expr1.
				// Expr1 =  ["-"] Expr1 { Addop Term }.


Expr ::=  	(Expr0) ExprCondition:E1 QMARK ExprConditionTrue:E2 DOTS ExprConditionFalse:E3 {: RESULT=new Expr0(E1, E2, E3); RESULT.setLine(E1left); :}
		| 	(Expr1) ExprManjiProstiji:E1 {: RESULT=new Expr1(E1); RESULT.setLine(E1left); :}  ;
// Kad sam radio semanticku skontao sam da nemam ovo Condition pa ga menjam u Expr		
// Ipak moram da razbijem ovo na razlicite

ExprCondition ::= (ExprCondition) CondFact:condition {: RESULT=new ExprCondition(condition); RESULT.setLine(conditionleft); :} ;		// PROMENJENO kao pretpostavka modifikacije
ExprConditionTrue ::= (ExprConditionTrue) ExprManjiProstiji:conditionTrue {: RESULT=new ExprConditionTrue(conditionTrue); RESULT.setLine(conditionTrueleft); :} ;
ExprConditionFalse ::= (ExprConditionFalse) ExprManjiProstiji:conditionFalse {: RESULT=new ExprConditionFalse(conditionFalse); RESULT.setLine(conditionFalseleft); :} ;
	 
			
					
ExprManjiProstiji ::= 	(ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :} 
					|	(ExprTermMinus) MINUS Term:T1 {: RESULT=new ExprTermMinus(T1); RESULT.setLine(T1left); :}
					|	(ExprTermList) ExprManjiProstiji:E1 Addop:A2 Term:T3 {: RESULT=new ExprTermList(E1, A2, T3); RESULT.setLine(E1left); :} 
					|   (ExprMAX) MAX Designator:des2 {: RESULT=new ExprMAX(des2); RESULT.setLine(des2left); :};
//		
//						Jedva sam dosao do ove (^^^) kombinacije koja radi. Greska bila u .java
//						ideja pronadjena na netu, na nekom gitu.
//						
//				ExprManjiProstiji ::= (ExprManjiProstiji)  TermsInExpr
//									| (ExprManjiProstijiMinus) MINUS TermsInExpr ;
//						
//			
//				OneMinus ::= 	(Minus) 	MINUS
//						|	(NoMinus) 	Epsilon ;
//			
//				TermsInExpr ::= (TermsInExpr) TermsInExpr Addop Term 
//						|	(TermsInExprNo) Term
//						;
//		
			
Term ::= 	(TermMore) Term:T1 Mulop:M2 Factor:t {: RESULT=new TermMore(T1, M2, t); RESULT.setLine(T1left); :}  
		|	(TermOne) Factor:t {: RESULT=new TermOne(t); RESULT.setLine(tleft); :} ;
					// Faktoru t je dodeljen ovaj naziv t koji je u Expr postavljen za Term 
					// i tako dalje ja mislim da bismo mogli sve da povezemo do krajnje stvari i nju
					// nekako da odredimo sta je
					// Ovo ce nam omoguciti da kod visit(term) mozemo da uradimo term.getFactor().struct;
					// kod visit(addexpr mozes videti bolji primer ovoga sa t i te
					
Factor ::= 	(FactVar) Designator:designName {: RESULT=new FactVar(designName); RESULT.setLine(designNameleft); :}
		|	(FuncCall) Designator:funcName LPAREN ActPars:A1 RPAREN {: RESULT=new FuncCall(funcName, A1); RESULT.setLine(funcNameleft); :}
		|	(FactNum) NUMBER_CONST:N1 {: RESULT=new FactNum(N1); RESULT.setLine(N1left); :}
		|	(FactChar) CHAR_CONST:C1 {: RESULT=new FactChar(C1); RESULT.setLine(C1left); :}
		|  	(FactBool) BOOL_CONST:B1 {: RESULT=new FactBool(B1); RESULT.setLine(B1left); :}
		|	(FactNew) NEW Type:T1 {: RESULT=new FactNew(T1); RESULT.setLine(T1left); :}
		| 	(FactNewArray) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new FactNewArray(T1, E2); RESULT.setLine(T1left); :}
		| 	(FactExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactExpr(E1); RESULT.setLine(E1left); :} ;	

Designator ::= (DesignatorJustOne) IDENT:destName {: RESULT=new DesignatorJustOne(destName); RESULT.setLine(destNameleft); :} 
			| 	(DesignatorOneDot) IDENT:destName DOT IDENT:I1 {: RESULT=new DesignatorOneDot(destName, I1); RESULT.setLine(destNameleft); :}
			|	(DesignatorOneArray) IDENT:destName LSQUARE Expr:exprr RSQUARE {: RESULT=new DesignatorOneArray(destName, exprr); RESULT.setLine(destNameleft); :} ;

// 			IdentOrExpr ::= (DesignIdentOne) DOT IDENT
//					|	(DesignIdent) IdentOrExpr DOT IDENT 
//					| 	(DesignExprOne) LSQUARE Expr RSQUARE;
//					| 	(DesignExpr) IdentOrExpr LSQUARE Expr RSQUARE 
//			Ovo je preuredjeno na osnovu onog razvrsavanja po nivoima, skinuo sam ove rekurzije neke
//  		Edit: u najnovijoj verziji sam sve ovo spojio u Designator

Assignop ::= ASSIGN {: RESULT=new AssignopDerived1(); :} ;

Relop ::= (RelopEqual) EQUAL {: RESULT=new RelopEqual(); :}
		| (RelopNotEqual) NEQUAL {: RESULT=new RelopNotEqual(); :}
		| (RelopGreater) GT {: RESULT=new RelopGreater(); :}
		| (RelopGreaterEqual) GE {: RESULT=new RelopGreaterEqual(); :}
		| (RelopLower) LT {: RESULT=new RelopLower(); :}
		| (RelopLowerEqual) LE {: RESULT=new RelopLowerEqual(); :}  ;

Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :} 
		| (AddopMinus) MINUS {: RESULT=new AddopMinus(); :} ; 

Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :} 
		| (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		| (MulopMod) MOD {: RESULT=new MulopMod(); :} ;
	
	
				// Ovo sam dodao dok sam jos pokusavao da otklonim gresku
				// u .java fajlovima, tehnicki, uopste nije bitno ali neka ga sada	
Epsilon ::= {: RESULT=new EpsilonDerived1(); :} /* epsilon */;



// Ovo apsolutno nicemu ne sluzi ali jebi ga.
// Na ovo ce naici nikad
Errorr ::= (Errorr) ERROR:gr {:
			  					MyCompilerImpl.addErrorVeljko(1, "Ovo se nikad nece desiti",grleft );
			  					parser.log.debug("Leksicka greska "+ grleft);
								//parser.report_error("Leksicka greska " + grleft, null);   
								 :} {: RESULT=new Errorr(); :};