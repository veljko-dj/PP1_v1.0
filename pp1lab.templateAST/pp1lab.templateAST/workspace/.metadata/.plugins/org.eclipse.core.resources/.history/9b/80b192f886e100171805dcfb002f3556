package rs.ac.bg.etf.pp1;

import java.util.ArrayList;
import java.util.List;

import rs.ac.bg.etf.pp1.ast.ActualParam;
import rs.ac.bg.etf.pp1.ast.ActualParamList;
import rs.ac.bg.etf.pp1.ast.ActualParams;
import rs.ac.bg.etf.pp1.ast.ActualPars;
import rs.ac.bg.etf.pp1.ast.Actuals;
import rs.ac.bg.etf.pp1.ast.AddExpr;
import rs.ac.bg.etf.pp1.ast.Addop;
import rs.ac.bg.etf.pp1.ast.Assignment;
import rs.ac.bg.etf.pp1.ast.Const;
import rs.ac.bg.etf.pp1.ast.Designator;
import rs.ac.bg.etf.pp1.ast.ErrAssignment;
import rs.ac.bg.etf.pp1.ast.Var;
import rs.ac.bg.etf.pp1.ast.VisitorAdaptor;

public class SyntaxTreePrinter extends VisitorAdaptor {

	List<String> nodes = new ArrayList<>();
	
	protected String createNode(Object obj) {
		String name = obj.getClass().getSimpleName();
		return "\"" + name + "\" [{"+name+"} color=black]";
	}
	
	@Override
	public void visit(Var Var) {
		nodes.add(createNode(Var));
	}
	
	@Override
	public void visit(ActualParam ActualParam) {
		nodes.add(createNode(ActualParam));
	}
	
	@Override
	public void visit(ActualParamList ActualParamList) {
		nodes.add(createNode(ActualParamList));
	}
	
	@Override
	public void visit(ActualParams ActualParams) {
		nodes.add(createNode(ActualParams));
	}
	
	@Override
	public void visit(ActualPars ActualPars) {
		nodes.add(createNode(ActualPars));
	}
	
	@Override
	public void visit(Actuals Actuals) {
		nodes.add(createNode(Actuals));
	}
	
	@Override
	public void visit(AddExpr AddExpr) {
		nodes.add(createNode(AddExpr));
	}
	
	@Override
	public void visit(Addop Addop) {
		nodes.add(createNode(Addop));
	}
	
	@Override
	public void visit(Assignment Assignment) {
		nodes.add(createNode(Assignment));
	}
	
	@Override
	public void visit(Const Const) {
		nodes.add(createNode(Const));
	}
	
	@Override
	public void visit(Designator Designator) {
		nodes.add(createNode(Designator));
	}
	
	@Override
	public void visit(ErrAssignment ErrAssignment) {
		nodes.add(createNode(ErrAssignment));
	}
}
